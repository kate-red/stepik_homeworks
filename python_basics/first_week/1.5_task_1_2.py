# Задача 1
# Реализуйте класс MoneyBox, для работы с виртуальной копилкой


class MoneyBox:
    def __init__(self, capacity):
        self.count = 0
        self.capacity = capacity

    def can_add(self, v):
        if v <= self.capacity:
            return True
        else:
            return False

    def add(self, v):
        if self.can_add(v):
            self.count += v
            self.capacity -= v

# Задача 2
# Вам дается последовательность целых чисел и вам нужно ее обработать и вывести на экран сумму первой пятерки чисел из
# этой последовательности, затем сумму второй пятерки, и т. д.
# Но последовательность не дается вам сразу целиком. С течением времени к вам поступают её последовательные части.
#
# Реализуйте класс Buffer, который будет накапливать в себе элементы последовательности и выводить сумму пятерок
# последовательных элементов по мере их накопления.
#
# Одним из требований к классу является то, что он не должен хранить в себе больше элементов, чем ему действительно
# необходимо, т. е. он не должен хранить элементы, которые уже вошли в пятерку, для которой была выведена сумма.


class Buffer:
    def __init__(self):
        self.list = []

    def add(self, *a):
        self.list += a
        while len(self.list) >= 5:
            print(sum(self.list[0:5]))
            del self.list[0:5]

    def get_current_part(self):
        return self.list
